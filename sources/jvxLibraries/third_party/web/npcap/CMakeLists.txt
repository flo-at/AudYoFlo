set(PROJECT_NAME npcap-sdk)
include(${JVX_CMAKE_DIR}/common_local_lib_head.cmake)

if(${JVX_OS} MATCHES "windows")
	if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/npcap-sdk)
		message("npcap-sdk sub project not available. Starting script to download it.") 
		execute_process(COMMAND ${mysh} -c "cd ${CMAKE_CURRENT_SOURCE_DIR} ; ./prepareModules.sh; exit")
		message("npcap-sdk installation complete.")
	endif()

	set(PCAP_LIBRARY_PATH  "${CMAKE_CURRENT_SOURCE_DIR}/npcap-sdk" CACHE INTERNAL "npcap-sdk lib path (windows)")

	if(JVX_PLATFORM MATCHES "32bit")
		set(PCAP_INCLUDEDIR_OSGUESS ${PCAP_LIBRARY_PATH}/Include)
		set(PCAP_LIB_PATH_OSGUESS ${PCAP_LIBRARY_PATH}/Lib)
	else()
		set(PCAP_INCLUDEDIR_OSGUESS ${PCAP_LIBRARY_PATH}/Include)
		set(PCAP_LIB_PATH_OSGUESS ${PCAP_LIBRARY_PATH}/Lib/x64)
	endif()
	set(PCAP_LIBNAME_OS "wpcap")
	set(PCAPPA_LIBNAME_OS "packet")
	find_path (PCAP_INCLUDEDIR pcap.h PATHS "${PCAP_INCLUDEDIR_OSGUESS}")

	if(PCAP_INCLUDEDIR)
		set(PCAP_FOUND TRUE)
		find_library (PCAP_LIBRARIES NAMES ${PCAP_LIBNAME_OS} PATHS "${PCAP_LIB_PATH_OSGUESS}")
		find_library (PCAPPA_LIBRARIES NAMES ${PCAPPA_LIBNAME_OS} PATHS "${PCAP_LIB_PATH_OSGUESS}")
		message("    include path: ${PCAP_INCLUDEDIR}")
		message("    lib: ${PCAP_LIBRARIES}")
		message("    lib: ${PCAPPA_LIBRARIES}")
		add_library(${PCAP_LIBNAME_OS} SHARED IMPORTED)
		add_library(${PCAPPA_LIBNAME_OS} SHARED IMPORTED)
	else()
		set(PCAP_FOUND FALSE)
		message(FATAL_ERROR "XX> could not find PCAP, option must be deactivated manually to procede.")
	endif()
	
	if(JVX_RELEASE_SDK)
		get_filename_component(tmp_nm ${PCAP_LIBRARIES} NAME)
		set(PCAP_LIB_SDK ${tmp_nm} CACHE INTERNAL "Global values pcap lib")
	
		get_filename_component(tmp_nm ${PCAPPA_LIBRARIES} NAME)
		set(PCAPPA_LIB_SDK ${tmp_nm} CACHE INTERNAL "Global values pcappa lib")
		
		install(FILES ${PCAP_LIBRARIES} DESTINATION ${INSTALL_PATH_LIB_STATIC})
		install(FILES ${PCAPPA_LIBRARIES} DESTINATION ${INSTALL_PATH_LIB_STATIC})
	endif()

else()
	# Linux
	message(FATAL_ERROR "--> Looking for libpcap in linux - needs to be implemented!")
	if(NOT PCAP_LIBRARY_PATH)
		set(PCAP_LIBRARY_PATH $ENV{PCAP_LIBRARY_PATH})
	endif()
endif()
