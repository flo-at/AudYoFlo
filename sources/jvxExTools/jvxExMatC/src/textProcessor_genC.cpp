#include "scan_token_defines.h"
#include "textProcessor_core.h"
#include "jvx-helpers.h"

#include <iostream>
#include <fstream>
#include <sstream>

void
textProcessor_core::generateCode(const std::string& outFilenameH, const std::string& outFilenameHP)
{

	// String stream for h
	std::ostringstream streamH;
	std::ostringstream streamHP;
	std::ostringstream streamInit;
	std::ostringstream streamTerm;

	streamInit << "\n//==========================================" << std::endl;
	streamInit << "static " << MACRO_FUNCTION_RETURN_CALLCONVENTION << " " << INIT_EXTERNAL_CALL_HANDLE << "(" << EXTERNAL_CALL_HANDLE_TYPE << "* " 
		<< THE_EXTERNAL_CALL_HANDLER << ", IjvxExternalCallTarget* fObject, std::string& _theExtCallObjectName)" << std::endl;
	streamInit << "{" << std::endl;
	streamInit << "\tjvxErrorType res = JVX_NO_ERROR;" << std::endl;

	streamInit << "\tif(_theExtCallObjectName.empty())" << std::endl;
	streamInit << "\t{" << std::endl;
	streamInit << "\t\t_theExtCallObjectName = \"" << allFs.friendlyNameReferenceClass << "\";" << std::endl;
	streamInit << "\t}" << std::endl;
	streamInit << std::endl;

	streamInit << "\tif(fObject == NULL)" << std::endl;
	streamInit << "\t{" << std::endl;
	streamInit << "\t\treturn(JVX_ERROR_INVALID_ARGUMENT);" << std::endl;
	streamInit << "\t}" << std::endl;
	
	streamInit << "\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
	streamInit << "\t{" << std::endl;

	streamTerm << "\n//==========================================" << std::endl;
	streamTerm << "static " << MACRO_FUNCTION_RETURN_CALLCONVENTION << " " << TERMINATE_EXTERNAL_CALL_HANDLE << "(" << EXTERNAL_CALL_HANDLE_TYPE << "* " << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
	streamTerm << "{" << std::endl;
	streamTerm << "\tjvxErrorType res = JVX_NO_ERROR;" << std::endl;
	streamTerm << "\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
	streamTerm << "\t{" << std::endl;

	// Start generating code
	streamH << "#ifndef _" << jvx_toUpper(fileOutputMiddle) << "_H__" << std::endl;
	streamH << "#define _" << jvx_toUpper(fileOutputMiddle) << "_H__" << std::endl;

	//streamHP << "#ifndef _" << toUpper(purefilenameInput) << "PROTOTYPES_H__" << std::endl;
	//streamHP << "#define _" << toUpper(purefilenameInput) << "PROTOTYPES_H__" << std::endl;

	streamH << "\n//==============================================" << std::endl;
	streamH << "//Macro to activate/deactivate external call handling" << std::endl;
	streamH << "//==============================================" << std::endl;
	streamH << "// " << outFilenameH << std::endl << "// File generated by Javox Code Generation Tool, copyright Javox Solutions GmbH" << std::endl;

	streamHP << "\n//==============================================" << std::endl;
	streamHP << "//Macro to activate/deactivate external call handling" << std::endl;
	streamHP << "// " << outFilenameHP << std::endl << "// File generated by Javox Code Generation Tool, copyright Javox Solutions GmbH" << std::endl;
	streamHP << "//==============================================" << std::endl;
	streamHP << "#ifdef " << MACRO_ENABLE_CODE_CALL << "" << std::endl;
	// streamHP << std::endl << "\t// Reference to matlab call handler to be used throughout the components life time" << std::endl;
	// streamHP << "\t" << EXTERNAL_CALL_HANDLE_TYPE << "* _" << THE_EXTERNAL_CALL_HANDLER << ";" <<std::endl;
	// streamHP << std::endl;
	// streamHP << "\tstd::string _theExtCallObjectName;" << std::endl;
	//streamHP << std::endl;

	streamH << std::endl;
	streamH << "#include <string>" << std::endl;
	streamH << MACRO_SYSTEM_INCLUDE_STATEMENT << std::endl;
	if(allFs.generateForLibraryUse)
	{
		streamH << MACRO_LIBRARY_INCLUDE_STATEMENT << std::endl;
	}
	streamH << "#include <cassert>" << std::endl;

	if(allFs.generateForLibraryUse)
	{
		streamH << "#pragma comment ( lib, \"libmx\")" << std::endl;
		streamH << "#pragma comment ( lib, \"libmex\")" << std::endl;
		streamH << "#pragma comment ( lib, \"libeng\")" << std::endl;
		streamH << "#pragma comment ( lib, \"libmat\")"<< std::endl;
		streamH << "#ifdef _DEBUG" << std::endl;
		streamH << "#pragma comment ( lib, \"rtpL_matlabCallMTd.lib\")"<< std::endl;
		streamH << "#else" << std::endl;
		streamH << "#pragma comment ( lib, \"rtpL_matlabCallMT.lib\")"<< std::endl;
		streamH << "#endif" << std::endl;
	}
	//streamH << "static IrtpMatlabCall* " << THE_EXTERNAL_CALL_HANDLER << " = NULL;" << std::endl;

	streamH << "static " << MACRO_FUNCTION_RETURN_CALLCONVENTION << " requestExternalCallRegisterName(std::string& nmRegNameOnReturn)" << std::endl;
	streamH << "{" << std::endl;
	streamH << "\tnmRegNameOnReturn = \"" << allFs.friendlyNameReferenceClass << "\";" << std::endl;
	streamH << "\t return JVX_NO_ERROR;" << std::endl;
	streamH << "};" << std::endl;
	streamH << std::endl;
	streamH << "static " << MACRO_FUNCTION_RETURN_CALLCONVENTION << " requestExternalCallHandle(IjvxHiddenInterface* theHost, IjvxExternalCall** thePtr, jvxSize idx = 0, const char* filter_descriptor = NULL)" << std::endl;
	streamH << "{" << std::endl;
	streamH << "\t IjvxToolsHost* theTools = NULL;" << std::endl;
	streamH << "\t IjvxObject* theObj = NULL;" << std::endl;
	streamH << "\t jvxErrorType res = JVX_NO_ERROR;" << std::endl;
	streamH << "\t *thePtr = NULL;" << std::endl;
	streamH << "\t res = theHost->request_hidden_interface(JVX_INTERFACE_TOOLS_HOST, reinterpret_cast<jvxHandle**>(&theTools));" << std::endl;
	streamH << "\t if((res == JVX_NO_ERROR) && theTools)" << std::endl;
	streamH << "\t {" << std::endl;
	streamH << "\t\t res = theTools->reference_tool(JVX_COMPONENT_EXTERNAL_CALL, &theObj, idx, filter_descriptor);" << std::endl;
	streamH << "\t\t if((res == JVX_NO_ERROR) && theObj)" << std::endl;
	streamH << "\t\t {" << std::endl;
	streamH << "\t\t\t res = theObj->request_specialization(reinterpret_cast<jvxHandle**>(thePtr), NULL, NULL);" << std::endl;
	streamH << "\t\t }" << std::endl;
	streamH << "\t\t theHost->return_hidden_interface(JVX_INTERFACE_TOOLS_HOST, reinterpret_cast<jvxHandle*>(theTools));" << std::endl;
	streamH << "\t }" << std::endl;
	streamH << "\t return(res);" << std::endl;
	streamH << "};" << std::endl;
	streamH << std::endl;

	streamH << "static " << MACRO_FUNCTION_RETURN_CALLCONVENTION << " returnExternalCallHandle(IjvxHiddenInterface* theHost, IjvxExternalCall* thePtr)" << std::endl;
	streamH << "{" << std::endl;
	streamH << "\t IjvxToolsHost* theTools = NULL;" << std::endl;
	streamH << "\t IjvxObject* theObj = NULL;" << std::endl;
	streamH << "\t jvxErrorType res = JVX_NO_ERROR;" << std::endl;
	streamH << "\t res = theHost->request_hidden_interface(JVX_INTERFACE_TOOLS_HOST, reinterpret_cast<jvxHandle**>(&theTools));" << std::endl;
	streamH << "\t if((res == JVX_NO_ERROR) && theTools)" << std::endl;
	streamH << "\t {" << std::endl;
	streamH << "\t\t res = theTools->return_reference_tool(JVX_COMPONENT_EXTERNAL_CALL, static_cast<IjvxObject*>(thePtr));" << std::endl;
	streamH << "\t\t theHost->return_hidden_interface(JVX_INTERFACE_TOOLS_HOST, reinterpret_cast<jvxHandle*>(theTools));" << std::endl;
	streamH << "\t }" << std::endl;
	streamH << "\t return(res);" << std::endl;
	streamH << "};" << std::endl;
	streamH << std::endl;

	streamH << std::endl;

	for(unsigned int i = 0; i < allFs.lstFunctions.size(); i++)
	{
		streamH << std::endl;
		streamH << MACRO_FUNCTION_RETURN_CALLCONVENTION << " " << allFs.lstFunctions[i].nameFunctionC << "(" << EXTERNAL_CALL_HANDLE_TYPE << "* " << THE_EXTERNAL_CALL_HANDLER << ", IjvxExternalCallTarget* object, int nlhs, " << MACRO_TYPE_EXTERNAL_DATA
			<< "** plhs, int nrhs, const " << MACRO_TYPE_EXTERNAL_DATA << "** prhs, int offset_nlhs, int offset_nrhs)" << std::endl;
		streamH << "{" << std::endl;
		streamH << "\t jvxErrorType res = JVX_NO_ERROR;" << std::endl;
		streamH << "\t" << allFs.nameReferenceClass << "* hObject = dynamic_cast<" <<
			allFs.nameReferenceClass << "*>(object);" << std::endl;

		streamH << "\tif(hObject == NULL)" << std::endl;
		streamH << "\t{" << std::endl;
		streamH << "\t\ttheExtCallHandler->postMessageExternal(\"" << "(" << allFs.friendlyNameReferenceClass << "::"
						<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Object does not provide an entry of type <IjvxExternalCallTarget>. The most likely reason is that your object was not derived from this class.\\n\");" << std::endl;
		streamH << "\t\treturn(JVX_ERROR_INTERNAL);" << std::endl;
		streamH << "\t}" << std::endl;

		streamH << "\n\t//==========================================================" << std::endl;
		streamH << "\t// Check number of input and output arguments" << std::endl;
		streamH << "\t//==========================================================" << std::endl;

		streamH << "\tif(!((nrhs >= " << allFs.lstFunctions[i].acceptInputMin << ") && (nrhs <= "
			<< allFs.lstFunctions[i].acceptInputMax << ")))" << std::endl;
		streamH << "\t{" << std::endl << "\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal((\"" << "(" << allFs.friendlyNameReferenceClass << "::"
			<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Number of input arguments is not correct, expect a value between \" + jvx_int2String(offset_nrhs + "
			<< allFs.lstFunctions[i].acceptInputMin << ") + \" and \" + jvx_int2String(offset_nrhs + " << allFs.lstFunctions[i].acceptInputMax << ") + \""
			<< ".\\n\").c_str());" << std::endl << "\t\t" << MACRO_LEAVE_NEG_NUMBER_INPUT_PARAMETERS << ";" << std::endl << "\t}" << std::endl ;
		streamH << "\tif(!((nlhs >= " << allFs.lstFunctions[i].acceptOutputMin << ") && (nlhs <= "
			<< JVX_MAX(allFs.lstFunctions[i].acceptOutputMax,1) << ")))" << std::endl;
		streamH << "\t{" << std::endl << "\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal((\"" << "(" << allFs.friendlyNameReferenceClass << "::"
			<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Number of output arguments is not correct, expect a value between \" + jvx_int2String(offset_nlhs + "
			<< allFs.lstFunctions[i].acceptOutputMin << ") + \" and \" + jvx_int2String(offset_nlhs + " << JVX_MAX(1, allFs.lstFunctions[i].acceptOutputMax) << ") + \""
			<< ".\\n\").c_str());" << std::endl << "\t\t" << MACRO_LEAVE_NEG_NUMBER_OUTPUT_PARAMETERS << ";" << std::endl << "\t}" << std::endl ;

		std::ostringstream parametersFcall;
		std::ostringstream parametersTFcall;
		bool needComma = false;
		for(unsigned int j = 0;j < allFs.lstFunctions[i].inputArguments.size(); j++)
		{
			streamH << "\n\t//==========================================================" << std::endl;
			streamH << "\t// Generate code for input variable #" << j << std::endl;
			streamH << "\t//==========================================================" << std::endl;

			std::string dataType;
			std::string ptrType;
			std::string assignmentType;
			switch(allFs.lstFunctions[i].inputArguments[j].dimension)
			{
			case MAT_DIM_2D:
				ptrType = "**";
				assignmentType = "NULL";
				break;
			case MAT_DIM_1D:
				ptrType = "*";
				assignmentType = "NULL";
				break;
			case MAT_DIM_0D:
				if(allFs.lstFunctions[i].inputArguments[j].type == MAT_TYPE_INHERIT)
				{
					ptrType = "*";
					assignmentType = "NULL";
				}
				else
				{
					ptrType = "";
					assignmentType = "0";
				}
				break;
			}

			switch(allFs.lstFunctions[i].inputArguments[j].type)
			{
			case MAT_TYPE_MXARRAY:
				dataType = "const " MACRO_TYPE_EXTERNAL_DATA "*";
				ptrType = "";
				streamH << "\t" << dataType << " fldVarIn_v" << j << " = NULL;" << std::endl;
				break;
			case MAT_TYPE_INHERIT:
				dataType = MACRO_TYPE_HANDLE;
				streamH << "\t" << dataType << ptrType << " fldVarIn_v" << j << " = " << assignmentType << ";" << std::endl;
				break;
			case MAT_TYPE_DATA:
				dataType = MACRO_TYPE_DATA;
				streamH << "\t" << dataType << ptrType << " fldVarIn_v" << j << " = " << assignmentType << ";" << std::endl;
				break;
			case MAT_TYPE_SIZE:
				dataType = MACRO_TYPE_SIZE;
				streamH << "\t" << dataType << ptrType << " fldVarIn_v" << j << " = " << assignmentType << ";" << std::endl;
				break;
				
			case MAT_TYPE_INT64:
				dataType = MACRO_TYPE_INT64_LE;
				streamH << "\t" << dataType << ptrType << " fldVarIn_v" << j << " = " << assignmentType << ";" << std::endl;
				break;
			case MAT_TYPE_INT32:
				dataType = MACRO_TYPE_INT32_LE;
				streamH << "\t" << dataType << ptrType << " fldVarIn_v" << j << " = " << assignmentType << ";" << std::endl;
				break;
			case MAT_TYPE_INT16:
				dataType = MACRO_TYPE_INT16_LE;
				streamH << "\t" << dataType << ptrType << " fldVarIn_v" << j << " = " << assignmentType << ";" << std::endl;
				break;
			case MAT_TYPE_INT8:
				dataType = MACRO_TYPE_INT8;
				streamH << "\t" << dataType << ptrType << " fldVarIn_v" << j << " = " << assignmentType << ";" << std::endl;
				break;
				
			case MAT_TYPE_UINT64:
				dataType = MACRO_TYPE_UINT64_LE;
				streamH << "\t" << dataType << ptrType << " fldVarIn_v" << j << " = " << assignmentType << ";" << std::endl;
				break;
			case MAT_TYPE_UINT32:
				dataType = MACRO_TYPE_UINT32_LE;
				streamH << "\t" << dataType << ptrType << " fldVarIn_v" << j << " = " << assignmentType << ";" << std::endl;
				break;
			case MAT_TYPE_UINT16:
				dataType = MACRO_TYPE_UINT16_LE;
				streamH << "\t" << dataType << ptrType << " fldVarIn_v" << j << " = " << assignmentType << ";" << std::endl;
				break;
			case MAT_TYPE_UINT8:
				dataType = MACRO_TYPE_UINT8;
				streamH << "\t" << dataType << ptrType << " fldVarIn_v" << j << " = " << assignmentType << ";" << std::endl;
				break;
				
				
			case MAT_TYPE_STRING:
				dataType = "const char*";
				ptrType = "";
				streamH << "\tstd::string fldVarIn_v" << j << " = \"\";" << std::endl;
				break;
			default:
				break;
			}

			if(allFs.lstFunctions[i].inputArguments[j].type == MAT_TYPE_MXARRAY)
			{
				streamH << "\tif(nrhs > " << j << ")" << std::endl;
				streamH << "\t{" << std::endl;
				streamH << "\t\t" << "fldVarIn_v" << j << " = prhs[" << j << "];" << std::endl;
			}
			else
			{
				streamH << "\t" << MACRO_TYPE_INT32_LE << " dimInX_v" << j << " = 0;" << std::endl;
				streamH << "\t" << MACRO_TYPE_INT32_LE << " dimInY_v" << j << " = 0;" << std::endl;
				streamH << "\tjvxDataFormat formatIn_v" << j << " = " << MACRO_DATATYPE_NONE << ";" << std::endl;
				streamH << "\tjvxDataFormat formatToC_v" << j << " = " << MACRO_DATATYPE_NONE << ";" << std::endl;
				streamH << "\tbool isStringIn_v" << j << " = false;" << std::endl;
				streamH << "\tif(nrhs > " << j << ")" << std::endl;
				streamH << "\t{" << std::endl;
				
				switch(allFs.lstFunctions[i].inputArguments[j].type)
				{
				case MAT_TYPE_DATA:
					streamH << "\t\tformatToC_v" << j << " = " << MACRO_DATATYPE_DATA << ";" << std::endl;
					break;
				case MAT_TYPE_SIZE:
					streamH << "\t\tformatToC_v" << j << " = " << MACRO_DATATYPE_SIZE << ";" << std::endl;
					break;

				case MAT_TYPE_INT64:
					streamH << "\t\tformatToC_v" << j << " = " << MACRO_DATATYPE_64BIT_LE << ";" << std::endl;
					break;
				case MAT_TYPE_INT32:
					streamH << "\t\tformatToC_v" << j << " = " << MACRO_DATATYPE_32BIT_LE << ";" << std::endl;
					break;
				case MAT_TYPE_INT16:
					streamH << "\t\tformatToC_v" << j << " = " << MACRO_DATATYPE_16BIT_LE << ";" << std::endl;
					break;
				case MAT_TYPE_INT8:
					streamH << "\t\tformatToC_v" << j << " = " << MACRO_DATATYPE_8BIT << ";" << std::endl;
					break;

				case MAT_TYPE_UINT64:
					streamH << "\t\tformatToC_v" << j << " = " << MACRO_DATATYPE_U64BIT_LE << ";" << std::endl;
					break;
				case MAT_TYPE_UINT32:
					streamH << "\t\tformatToC_v" << j << " = " << MACRO_DATATYPE_U32BIT_LE << ";" << std::endl;
					break;
				case MAT_TYPE_UINT16:
					streamH << "\t\tformatToC_v" << j << " = " << MACRO_DATATYPE_U16BIT_LE << ";" << std::endl;
					break;
				case MAT_TYPE_UINT8:
					streamH << "\t\tformatToC_v" << j << " = " << MACRO_DATATYPE_U8BIT << ";" << std::endl;
					break;

				default:
					break;
				}
					
				streamH << "\n\t\t//==========================================================" << std::endl;
				streamH << "\t\t// Get the properties of Matlab input variable #" << j << std::endl;
				streamH << "\t\t//==========================================================" << std::endl;

				streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
				streamH << "\t\t{\n\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->getPropertiesVariable(prhs[" << j << "], &formatIn_v"
					<< j << ", &isStringIn_v" << j << ", &dimInX_v" << j << ", &dimInY_v" << j << ");" << std::endl;
				streamH << "\t\t}" << std::endl;

				streamH << "\n\t\t//==========================================================" << std::endl;
				streamH << "\t\t// Check the type of input variable #" << j << std::endl;
				streamH << "\t\t//==========================================================" << std::endl;
				switch(allFs.lstFunctions[i].inputArguments[j].type)
				{
				case MAT_TYPE_INHERIT:
					streamH << "\t\tif(!("
						<< "(formatIn_v" << j << " == " << MACRO_DATATYPE_DATA << ")" << "||"
						<< "(formatIn_v" << j << " == " << MACRO_DATATYPE_32BIT_LE << ")" << "||"
						<< "(formatIn_v" << j << " == " << MACRO_DATATYPE_16BIT_LE << ")" << "))"
						"\n\t\t{\n\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(\"" << "(" << allFs.friendlyNameReferenceClass << "::"
						<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Wrong type of input variable id#" << j << ", expected format DOUBLE, FLOAT, INT64, INT32, INT16 or INT8.\\n\");" << std::endl
						<< "\t\t\t" << MACRO_LEAVE_NEG_TYPE_INPUT_PARAMETERS << ";\n" << "\t\t}" << std::endl;
					break;
				case MAT_TYPE_DATA:
					streamH << "\t\tif(formatIn_v" << j
						<< " != " << MACRO_DATATYPE_DATA << ")\n\t\t{\n\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(\"" << "(" << allFs.friendlyNameReferenceClass << "::"
						<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Wrong type of input variable id#" << j << ", expected format " << JVX_DATA_DESCRIPTOR << ".\\n\");" << std::endl
						<< "\t\t\t" << MACRO_LEAVE_NEG_TYPE_INPUT_PARAMETERS << ";\n" << "\t\t}" << std::endl;
					break;
				case MAT_TYPE_SIZE:
					streamH << "\t\tif( " 
						<< "!( " 
						<< "(formatIn_v" << j << " == " << MACRO_DATATYPE_8BIT << ") ||" 
						<< "(formatIn_v" << j << " == " << MACRO_DATATYPE_32BIT_LE << ") ||" 
						<< "(formatIn_v" << j << " == " << MACRO_DATATYPE_16BIT_LE << ") ||" 
						<< "(formatIn_v" << j << " == " << MACRO_DATATYPE_64BIT_LE << ") ||" 
						<< "(formatIn_v" << j << " == " << MACRO_DATATYPE_DATA << ")" 
						<< ")" 
						<< ")\n\t\t{\n\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(\"" << "(" << allFs.friendlyNameReferenceClass << "::"
						<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Wrong type of input variable id#" << j << ", expected format " << JVX_DATA_DESCRIPTOR << ".\\n\");" << std::endl
						<< "\t\t\t" << MACRO_LEAVE_NEG_TYPE_INPUT_PARAMETERS << ";\n" << "\t\t}" << std::endl;
					break;

				case MAT_TYPE_INT64:
					streamH << "\t\tif(formatIn_v" << j
						<< " != " << MACRO_DATATYPE_64BIT_LE << ")\n\t\t{\n\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(\"" << "(" << allFs.friendlyNameReferenceClass << "::"
						<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Wrong type of input variable id#" << j << ", expected format INT64.\\n\");"<< std::endl
						<< "\t\t\t" << MACRO_LEAVE_NEG_TYPE_INPUT_PARAMETERS << ";\n" << "\t\t}" << std::endl;
					break;
				case MAT_TYPE_INT32:
					streamH << "\t\tif(formatIn_v" << j
						<< " != " << MACRO_DATATYPE_32BIT_LE << ")\n\t\t{\n\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(\"" << "(" << allFs.friendlyNameReferenceClass << "::"
						<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Wrong type of input variable id#" << j << ", expected format INT32.\\n\");"<< std::endl
						<< "\t\t\t" << MACRO_LEAVE_NEG_TYPE_INPUT_PARAMETERS << ";\n" << "\t\t}" << std::endl;
					break;
				case MAT_TYPE_INT16:
					streamH << "\t\tif(formatIn_v" << j
						<< " != " << MACRO_DATATYPE_16BIT_LE << ")\n\t\t{\n\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(\"" << "(" << allFs.friendlyNameReferenceClass << "::"
						<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Wrong type of input variable id#" << j << ", expected format INT16.\\n\");" << std::endl
						<< "\t\t\t" << MACRO_LEAVE_NEG_TYPE_INPUT_PARAMETERS << ";\n" << "\t\t}" << std::endl;
					break;
				case MAT_TYPE_INT8:
					streamH << "\t\tif(formatIn_v" << j
						<< " != JVX_DATAFORMAT_8BIT)\n\t\t{\n\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(\"" << "(" << allFs.friendlyNameReferenceClass << "::"
						<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Wrong type of input variable id#" << j << ", expected format INT8.\\n\");" << std::endl
						<< "\t\t\t" << MACRO_LEAVE_NEG_TYPE_INPUT_PARAMETERS << ";\n" << "\t\t}" << std::endl;
					break;

				case MAT_TYPE_UINT64:
					streamH << "\t\tif(formatIn_v" << j
						<< " != " << MACRO_DATATYPE_U64BIT_LE << ")\n\t\t{\n\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(\"" << "(" << allFs.friendlyNameReferenceClass << "::"
						<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Wrong type of input variable id#" << j << ", expected format UINT64.\\n\");"<< std::endl
						<< "\t\t\t" << MACRO_LEAVE_NEG_TYPE_INPUT_PARAMETERS << ";\n" << "\t\t}" << std::endl;
					break;
				case MAT_TYPE_UINT32:
					streamH << "\t\tif(formatIn_v" << j
						<< " != " << MACRO_DATATYPE_U32BIT_LE << ")\n\t\t{\n\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(\"" << "(" << allFs.friendlyNameReferenceClass << "::"
						<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Wrong type of input variable id#" << j << ", expected format UINT32.\\n\");"<< std::endl
						<< "\t\t\t" << MACRO_LEAVE_NEG_TYPE_INPUT_PARAMETERS << ";\n" << "\t\t}" << std::endl;
					break;
				case MAT_TYPE_UINT16:
					streamH << "\t\tif(formatIn_v" << j
						<< " != " << MACRO_DATATYPE_U16BIT_LE << ")\n\t\t{\n\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(\"" << "(" << allFs.friendlyNameReferenceClass << "::"
						<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Wrong type of input variable id#" << j << ", expected format UINT16.\\n\");" << std::endl
						<< "\t\t\t" << MACRO_LEAVE_NEG_TYPE_INPUT_PARAMETERS << ";\n" << "\t\t}" << std::endl;
					break;
				case MAT_TYPE_UINT8:
					streamH << "\t\tif(formatIn_v" << j
						<< " != JVX_DATAFORMAT_U8BIT)\n\t\t{\n\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(\"" << "(" << allFs.friendlyNameReferenceClass << "::"
						<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Wrong type of input variable id#" << j << ", expected format INT8.\\n\");" << std::endl
						<< "\t\t\t" << MACRO_LEAVE_NEG_TYPE_INPUT_PARAMETERS << ";\n" << "\t\t}" << std::endl;
					break;

				case MAT_TYPE_STRING:
					streamH << "\t\tif(!isStringIn_v" << j << ")\n\t\t{\n\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(\"" << "(" << allFs.friendlyNameReferenceClass << "::"
						<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Wrong type of input variable id#" << j << ", expected string variable.\\n\");" << std::endl
						<< "\t\t\t" << MACRO_LEAVE_NEG_TYPE_INPUT_PARAMETERS << ";\n" << "\t\t}" << std::endl;
					break;
				default:
					break;
				}

				if(allFs.lstFunctions[i].inputArguments[j].type != MAT_TYPE_STRING)
				{
					streamH << "\n\t\t//==========================================================" << std::endl;
					streamH << "\t\t// Check that no field is of zero length for input variable #" << j << std::endl;
					streamH << "\t\t//==========================================================" << std::endl;

					streamH << "\t\tif((dimInX_v" << j << " == 0)||(dimInY_v" << j << " == 0))\n\t\t{\n\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(\""
						<< "(" << allFs.nameReferenceClass << "::" << allFs.lstFunctions[i].nameFunctionCpp << ")" << " "
						<< "Variable id#" << j << " has zero length.\\n\");\n\t\t\t" << MACRO_LEAVE_NEG_ZEROSIZE_INPUT_PARAMETERS << ";\n\t\t}" << std::endl;


					if(allFs.lstFunctions[i].inputArguments[j].dimX >= 0)
					{
						streamH << "\n\t\t//==========================================================" << std::endl;
						streamH << "\t\t// Check that the number of rows of the matrix related to input variable #" << j << " is correct." << std::endl;
						streamH << "\t\t//==========================================================" << std::endl;
						streamH << "\t\tif(dimInX_v" << j << " != " << allFs.lstFunctions[i].inputArguments[j].dimX
							<< ")\n\t\t{\n\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal( \"" << "(" << allFs.friendlyNameReferenceClass << "::" << allFs.lstFunctions[i].nameFunctionCpp << ")" << " "
							<< "Wrong number of columns in matrix variable id#" << j << ", expected "
							<< allFs.lstFunctions[i].inputArguments[j].dimX << ".\\n\");\n\t\t\t" << MACRO_LEAVE_NEG_NUMCOLUMNS_INPUT_PARAMETERS << ";\n\t\t}"
							<< std::endl;
					}
					if(allFs.lstFunctions[i].inputArguments[j].dimY >= 0)
					{
						streamH << "\n\t\t//==========================================================" << std::endl;
						streamH << "\t\t// Check that the number of columns of the matrix related to input variable #" << j << " is correct." << std::endl;
						streamH << "\t\t//==========================================================" << std::endl;
						streamH << "\t\tif(dimInY_v" << j << " != " << allFs.lstFunctions[i].inputArguments[j].dimY
							<< ")\n\t\t{\n\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal( \"" << "(" << allFs.friendlyNameReferenceClass << "::"
							<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " "
							<< "Wrong number of rows in matrix variable id#" << j << ", expected "
							<< allFs.lstFunctions[i].inputArguments[j].dimY << ".\\n\");\n\t\t\t" << MACRO_LEAVE_NEG_NUMROWS_INPUT_PARAMETERS << ";\n\t\t}"
							<< std::endl;
					}
				}
			}
			streamH << "\t}" << std::endl;

			if(needComma)
			{
				parametersTFcall << ", \n\t\t\t" << " /* " << allFs.lstFunctions[i].inputArguments[j].description << "->*/ " << dataType << ptrType << " paramIn" << j  << std::flush;
				switch(allFs.lstFunctions[i].inputArguments[j].type)
				{
				case MAT_TYPE_MXARRAY:
					parametersFcall << ", fldVarIn_v" << j << std::flush;
					break;
				case MAT_TYPE_INHERIT:
					switch(allFs.lstFunctions[i].inputArguments[j].dimension)
					{
					case MAT_DIM_2D:
						parametersFcall << ", fldVarIn_v" << j << ", formatIn_v" << j << ", dimInY_v" << j << ", dimInX_v" << j << std::flush;
						parametersTFcall << ", jvxDataFormat formatIn" << j << ", " << MACRO_TYPE_INT32_LE << " dimInY" << j << ", " << MACRO_TYPE_INT32_LE << " dimInX" << j << std::flush;
						break;
					case MAT_DIM_1D:
						parametersFcall << ", fldVarIn_v" << j << ", formatIn_v" << j << ", dimInX_v" << j << std::flush;
						parametersTFcall << ", jvxDataFormat formatIn" << j << ", " << MACRO_TYPE_INT32_LE << " dimInX" << j << std::flush;
						break;
					case MAT_DIM_0D:
						parametersFcall << ", fldVarIn_v" << j << ", formatIn_v" << std::flush;
						parametersTFcall << ", jvxDataFormat formatIn" << j << std::flush;
						break;
					}
					break;
				case MAT_TYPE_SIZE:
				case MAT_TYPE_DATA:
				case MAT_TYPE_INT64:
				case MAT_TYPE_INT32:
				case MAT_TYPE_INT16:
				case MAT_TYPE_INT8:
				case MAT_TYPE_UINT64:
				case MAT_TYPE_UINT32:
				case MAT_TYPE_UINT16:
				case MAT_TYPE_UINT8:

					switch(allFs.lstFunctions[i].inputArguments[j].dimension)
					{
					case MAT_DIM_2D:
						parametersFcall << ", fldVarIn_v" << j << ", dimInY_v" << j << ", dimInX_v" << j << std::flush;
						parametersTFcall << ", " << MACRO_TYPE_INT32_LE << " dimInY" << j << ", " << MACRO_TYPE_INT32_LE << " dimInX" << j << std::flush;
						break;
					case MAT_DIM_1D:
						parametersFcall << ", fldVarIn_v" << j << ", dimInX_v" << j << std::flush;
						parametersTFcall << ", " << MACRO_TYPE_INT32_LE << " dimInX" << j << std::flush;
						break;
					case MAT_DIM_0D:
						parametersFcall << ", fldVarIn_v" << j << std::flush;
						break;
					}
					break;
				case MAT_TYPE_STRING:
					parametersFcall << ", fldVarIn_v" << j << ".c_str()" << std::flush;
					break;
				default:
					break;

				}
			}
			else
			{
				parametersTFcall << " /* " << allFs.lstFunctions[i].inputArguments[j].description << "->*/ " << dataType << ptrType << " paramIn" << j  << std::flush;
				switch(allFs.lstFunctions[i].inputArguments[j].type)
				{
				case MAT_TYPE_MXARRAY:
					parametersFcall << "fldVarIn_v" << j << std::flush;
					break;
				case MAT_TYPE_INHERIT:
					switch(allFs.lstFunctions[i].inputArguments[j].dimension)
					{
					case MAT_DIM_2D:
						parametersFcall << "fldVarIn_v" << j << ", formatIn_v" << j << ", dimInY_v" << j << ", dimInX_v" << j << std::flush;
						parametersTFcall << ", jvxDataFormat formatIn" << j << ", " << MACRO_TYPE_INT32_LE << " dimInY" << j << ", " << MACRO_TYPE_INT32_LE << " dimInX" << j << std::flush;
						break;
					case MAT_DIM_1D:
						parametersFcall << "fldVarIn_v" << j << ", formatIn_v" << j << ", dimInX_v" << j << std::flush;
						parametersTFcall << ", jvxDataFormat formatIn" << j << ", " << MACRO_TYPE_INT32_LE << " dimInX" << j << std::flush;
						break;
					case MAT_DIM_0D:
						parametersFcall << "fldVarIn_v" << j << ", formatIn_v" << std::flush;
						parametersTFcall << ", jvxDataFormat formatIn" << j << std::flush;
						break;
					}
					break;
				case MAT_TYPE_DATA:
				case MAT_TYPE_SIZE:
				case MAT_TYPE_INT64:
				case MAT_TYPE_INT32:
				case MAT_TYPE_INT16:
				case MAT_TYPE_INT8:
				case MAT_TYPE_UINT64:
				case MAT_TYPE_UINT32:
				case MAT_TYPE_UINT16:
				case MAT_TYPE_UINT8:
					switch(allFs.lstFunctions[i].inputArguments[j].dimension)
					{
					case MAT_DIM_2D:
						parametersFcall << "fldVarIn_v" << j << ", dimInY_v" << j << ", dimInX_v" << j << std::flush;
						parametersTFcall << ", " << MACRO_TYPE_INT32_LE << " dimInY" << j << ", " << MACRO_TYPE_INT32_LE << " dimInX" << j << std::flush;
						break;
					case MAT_DIM_1D:
						parametersFcall << "fldVarIn_v" << j << ", dimInX_v" << j << std::flush;
						parametersTFcall << ", " << MACRO_TYPE_INT32_LE << " dimInX" << j << std::flush;
						break;
					case MAT_DIM_0D:
						parametersFcall << "fldVarIn_v" << j << std::flush;
						break;
					}
					break;
				case MAT_TYPE_STRING:
					parametersFcall << "fldVarIn_v" << j << ".c_str()" << std::flush;
					break;
				default:
					break;
				}
				needComma = true;
			}
		}

		for(unsigned int j = 0;j < allFs.lstFunctions[i].inputArguments.size(); j++)
		{
			streamH << "\n\t//==========================================================" << std::endl;
			streamH << "\t// Allocate memory for input variable #" << j << std::endl;
			streamH << "\t//==========================================================" << std::endl;
			switch(allFs.lstFunctions[i].inputArguments[j].dimension)
			{
			case MAT_DIM_2D:
				switch(allFs.lstFunctions[i].inputArguments[j].type)
				{
				case MAT_TYPE_INHERIT:
					streamH << "\tif((dimInX_v" << j << " != 0) && (dimInY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tsize_t szElement = 0;\n" << std::endl;
					streamH << "\t\tswitch(formatIn_v" << j << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_DATA << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(jvxData);\n\t\t\tbreak;" << std::endl;

					streamH << "\t\tcase " << MACRO_DATATYPE_64BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT64_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_32BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT32_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_16BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT16_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_8BIT << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT8 << ");\n\t\t\tbreak;" << std::endl;

					streamH << "\t\tcase " << MACRO_DATATYPE_U64BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_UINT64_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_U32BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_UINT32_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_U16BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_UINT16_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_U8BIT << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_UINT8 << ");\n\t\t\tbreak;" << std::endl;

					streamH << "\t\tdefault:" << std::endl;
					streamH << "\t\t\tszElement = 0;\n\t\t\tbreak;" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(szElement != 0)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_HANDLE << "*[dimInY_v" << j << "];" << std::endl;
					streamH << "\t\t\tfor(int k = 0; k < dimInY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t\t{" << std::endl;
					streamH << "\t\t\t\tfldVarIn_v" << j << "[k] = (" << MACRO_TYPE_HANDLE << "*) new char[szElement*dimInX_v" << j << "];" << std::endl;
					streamH << "\t\t\t}" << std::endl;
					streamH << "\t\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t\t{" << std::endl;
					streamH << "\t\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void**>(fldVarIn_v" << j << "), dimInY_v" << j << ", dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t\t}" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_DATA:
					streamH << "\tif((dimInX_v" << j << " != 0) && (dimInY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_DATA << "*[dimInY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimInY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarIn_v" << j << "[k] = new " << MACRO_TYPE_DATA << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void**>(fldVarIn_v" << j << "), dimInY_v" << j << ", dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_SIZE:
					streamH << "\tif((dimInX_v" << j << " != 0) && (dimInY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_SIZE << "*[dimInY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimInY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarIn_v" << j << "[k] = new " << MACRO_TYPE_SIZE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void**>(fldVarIn_v" << j << "), dimInY_v" << j << ", dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT64:
					streamH << "\tif((dimInX_v" << j << " != 0) && (dimInY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_INT64_LE << "*[dimInY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimInY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarIn_v" << j << "[k] = new " << MACRO_TYPE_INT64_LE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void**>(fldVarIn_v" << j << "), dimInY_v" << j << ", dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT32:
					streamH << "\tif((dimInX_v" << j << " != 0) && (dimInY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_INT32_LE << "*[dimInY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimInY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarIn_v" << j << "[k] = new " << MACRO_TYPE_INT32_LE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void**>(fldVarIn_v" << j << "), dimInY_v" << j << ", dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT16:
					streamH << "\tif((dimInX_v" << j << " != 0) && (dimInY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_INT16_LE << "*[dimInY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimInY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarIn_v" << j << "[k] = new " << MACRO_TYPE_INT16_LE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void**>(fldVarIn_v" << j << "), dimInY_v" << j << ", dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT8:
					streamH << "\tif((dimInX_v" << j << " != 0) && (dimInY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_INT8 << "*[dimInY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimInY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarIn_v" << j << "[k] = new " << MACRO_TYPE_INT8 << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void**>(fldVarIn_v" << j << "), dimInY_v" << j << ", dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
					
				case MAT_TYPE_UINT64:
					streamH << "\tif((dimInX_v" << j << " != 0) && (dimInY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_UINT64_LE << "*[dimInY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimInY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarIn_v" << j << "[k] = new " << MACRO_TYPE_UINT64_LE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void**>(fldVarIn_v" << j << "), dimInY_v" << j << ", dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT32:
					streamH << "\tif((dimInX_v" << j << " != 0) && (dimInY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_UINT32_LE << "*[dimInY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimInY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarIn_v" << j << "[k] = new " << MACRO_TYPE_UINT32_LE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void**>(fldVarIn_v" << j << "), dimInY_v" << j << ", dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT16:
					streamH << "\tif((dimInX_v" << j << " != 0) && (dimInY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_UINT16_LE << "*[dimInY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimInY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarIn_v" << j << "[k] = new " << MACRO_TYPE_UINT16_LE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void**>(fldVarIn_v" << j << "), dimInY_v" << j << ", dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT8:
					streamH << "\tif((dimInX_v" << j << " != 0) && (dimInY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_UINT8 << "*[dimInY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimInY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarIn_v" << j << "[k] = new " << MACRO_TYPE_UINT8 << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void**>(fldVarIn_v" << j << "), dimInY_v" << j << ", dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
					
				case MAT_TYPE_STRING:
					streamH << "\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\t" << MACRO_TYPE_STRING << "* strRet = NULL;" << std::endl;
					streamH << "\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(&strRet" << ", prhs[" << j << "], \"fldVarIn_v" << j << ");" << std::endl;
					streamH << "\t\tif(strRet) fldVarIn_v" << j << " = strRet->bString;" << std::endl;
					streamH << "\t\t" << THE_EXTERNAL_CALL_HANDLER << "->releaseString(strRet);" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				default:
					break;
				}
				break;
			case MAT_DIM_1D:
				switch(allFs.lstFunctions[i].inputArguments[j].type)
				{
				case MAT_TYPE_INHERIT:
					streamH << "\tif((dimInX_v" << j << " != 0) && (dimInY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tsize_t szElement = 0;\n" << std::endl;
					streamH << "\t\tswitch(formatIn_v" << j << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_DATA << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(jvxData);\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_64BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT64_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_32BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT32_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_16BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT16_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_8BIT << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT8 << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tdefault:" << std::endl;
					streamH << "\t\t\tszElement = 0;\n\t\t\tbreak;" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(szElement != 0)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tfldVarIn_v" << j << " = (" << MACRO_TYPE_HANDLE << "*)new char[szElement*dimInX_v" << j << "];" << std::endl;
					streamH << "\t\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t\t{" << std::endl;
					streamH << "\t\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(fldVarIn_v" << j << "), dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t\t}" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_DATA:
					streamH << "\tif(dimInX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_DATA << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(fldVarIn_v" << j << "), dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_SIZE:
					streamH << "\tif(dimInX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_SIZE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(fldVarIn_v" << j << "), dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT64:
					streamH << "\tif(dimInX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_INT64_LE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(fldVarIn_v" << j << "), dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT32:
					streamH << "\tif(dimInX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_INT32_LE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(fldVarIn_v" << j << "), dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT16:
					streamH << "\tif(dimInX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_INT16_LE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(fldVarIn_v" << j << "), dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT8:
					streamH << "\tif(dimInX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_INT8 << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(fldVarIn_v" << j << "), dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;

				case MAT_TYPE_UINT64:
					streamH << "\tif(dimInX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_UINT64_LE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(fldVarIn_v" << j << "), dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT32:
					streamH << "\tif(dimInX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_UINT32_LE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(fldVarIn_v" << j << "), dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT16:
					streamH << "\tif(dimInX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_UINT16_LE << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(fldVarIn_v" << j << "), dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT8:
					streamH << "\tif(dimInX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = new " << MACRO_TYPE_UINT8 << "[dimInX_v" << j << "];" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(fldVarIn_v" << j << "), dimInX_v" << j
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;

					case MAT_TYPE_STRING:
					streamH << "\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\t" << MACRO_TYPE_STRING << "* strRet = NULL;" << std::endl;
					streamH << "\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(&strRet" << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\tif(strRet) fldVarIn_v" << j << " = strRet->bString;" << std::endl;
					streamH << "\t\t" << THE_EXTERNAL_CALL_HANDLER << "->releaseString(strRet);" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				default:
					break;

				}
				break;
			case MAT_DIM_0D:
				switch(allFs.lstFunctions[i].inputArguments[j].type)
				{
				case MAT_TYPE_INHERIT:
					streamH << "\tif((dimInX_v" << j << " != 0) && (dimInY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tsize_t szElement = 0;\n" << std::endl;
					streamH << "\t\tswitch(formatIn_v" << j << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_DATA << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(jvxData);\n\t\t\tbreak;" << std::endl;					
					streamH << "\t\tcase " << MACRO_DATATYPE_64BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT64_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_32BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT32_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_16BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT16_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_8BIT << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT8 << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tdefault:" << std::endl;
					streamH << "\t\t\tszElement = 0;\n\t\t\tbreak;" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(szElement != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = (" << MACRO_TYPE_HANDLE << "*)new char[szElement];" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(fldVarIn_v" << j << "), 1"
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_DATA:
					streamH << "\tif(nrhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = 0.0;" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(&fldVarIn_v" << j << "), 1"
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;				
				case MAT_TYPE_SIZE:
					streamH << "\tif(nrhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = 0;" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(&fldVarIn_v" << j << "), 1"
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;				

					case MAT_TYPE_INT64:
					streamH << "\tif(nrhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = 0;" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(&fldVarIn_v" << j << "), 1"
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT32:
					streamH << "\tif(nrhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = 0;" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(&fldVarIn_v" << j << "), 1"
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT16:
					streamH << "\tif(nrhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = 0;" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(&fldVarIn_v" << j << "), 1"
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT8:
					streamH << "\tif(nrhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = 0;" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(&fldVarIn_v" << j << "), 1"
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
					
					case MAT_TYPE_UINT64:
					streamH << "\tif(nrhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = 0;" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(&fldVarIn_v" << j << "), 1"
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT32:
					streamH << "\tif(nrhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = 0;" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(&fldVarIn_v" << j << "), 1"
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT16:
					streamH << "\tif(nrhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = 0;" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(&fldVarIn_v" << j << "), 1"
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT8:
					streamH << "\tif(nrhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarIn_v" << j << " = 0;" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(reinterpret_cast<void*>(&fldVarIn_v" << j << "), 1"
						<<  ", formatToC_v" << j << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;

				case MAT_TYPE_STRING:
					streamH << "\tif(nrhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t" << MACRO_TYPE_STRING << "* strRet = NULL;" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->convertExternalToC(&strRet" << ", prhs[" << j << "]);" << std::endl;
					streamH << "\t\tif(strRet) fldVarIn_v" << j << " = strRet->bString;" << std::endl;
					streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->releaseString(strRet);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				default:
					break;
				}
				break;
			default:
				break;
			}
		}

		for(unsigned int j = 0;j < allFs.lstFunctions[i].outputArguments.size(); j++)
		{
			streamH << "\n\t//==========================================================" << std::endl;
			streamH << "\t// Generate code for output variable #" << j << std::endl;
			streamH << "\t//==========================================================" << std::endl;

			std::string dataType;
			std::string ptrType;
			if(allFs.lstFunctions[i].outputArguments[j].type == MAT_TYPE_STRING)
			{
				dataType = MACRO_TYPE_STRING "*";
				ptrType = "";
				streamH << "\t" << MACRO_TYPE_STRING << "* fldVarOut_v" << j << " = NULL;" << std::endl;
			}
			else
			{
				std::string assignmentType;
				switch(allFs.lstFunctions[i].outputArguments[j].dimension)
				{
				case MAT_DIM_2D:
					ptrType = "**";
					assignmentType = "NULL";
					break;
				case MAT_DIM_1D:
					ptrType = "*";
					assignmentType = "NULL";
					break;
				case MAT_DIM_0D:
					if(allFs.lstFunctions[i].outputArguments[j].type == MAT_TYPE_INHERIT)
					{
						ptrType = "*";
						assignmentType = "NULL";
					}
					else
					{
						ptrType = "";
						assignmentType = "0";
					}
					break;
				default:
					break;
				}

				switch(allFs.lstFunctions[i].outputArguments[j].type)
				{
				case MAT_TYPE_MXARRAY:
					dataType = MACRO_TYPE_EXTERNAL_DATA;
					ptrType = "**";
					streamH << "\t" << dataType << ptrType << " fldVarOut_v" << j << " = NULL;" << std::endl;
					break;
				case MAT_TYPE_INHERIT:
					dataType = MACRO_TYPE_HANDLE;
					streamH << "\t" << dataType << ptrType << " fldVarOut_v" << j << " = " << assignmentType << ";" << std::endl;
					break;
				case MAT_TYPE_SIZE:
					dataType = MACRO_TYPE_SIZE;
					streamH << "\t" << dataType << ptrType << " fldVarOut_v" << j << " = " << assignmentType << ";" << std::endl;
					break;
				case MAT_TYPE_DATA:
					dataType = MACRO_TYPE_DATA;
					streamH << "\t" << dataType << ptrType << " fldVarOut_v" << j << " = " << assignmentType << ";" << std::endl;
					break;
				case MAT_TYPE_INT64:
					dataType = MACRO_TYPE_INT64_LE;
					streamH << "\t" << dataType << ptrType << " fldVarOut_v" << j << " = " << assignmentType << ";" << std::endl;
					break;
				case MAT_TYPE_INT32:
					dataType = MACRO_TYPE_INT32_LE;
					streamH << "\t" << dataType << ptrType << " fldVarOut_v" << j << " = " << assignmentType << ";" << std::endl;
					break;
				case MAT_TYPE_INT16:
					dataType = MACRO_TYPE_INT16_LE;
					streamH << "\t" << dataType << ptrType << " fldVarOut_v" << j << " = " << assignmentType << ";" << std::endl;
					break;
				case MAT_TYPE_INT8:
					dataType = MACRO_TYPE_INT8;
					streamH << "\t" << dataType << ptrType << " fldVarOut_v" << j << " = " << assignmentType << ";" << std::endl;
					break;
					
				case MAT_TYPE_UINT64:
					dataType = MACRO_TYPE_UINT64_LE;
					streamH << "\t" << dataType << ptrType << " fldVarOut_v" << j << " = " << assignmentType << ";" << std::endl;
					break;
				case MAT_TYPE_UINT32:
					dataType = MACRO_TYPE_UINT32_LE;
					streamH << "\t" << dataType << ptrType << " fldVarOut_v" << j << " = " << assignmentType << ";" << std::endl;
					break;
				case MAT_TYPE_UINT16:
					dataType = MACRO_TYPE_UINT16_LE;
					streamH << "\t" << dataType << ptrType << " fldVarOut_v" << j << " = " << assignmentType << ";" << std::endl;
					break;
				case MAT_TYPE_UINT8:
					dataType = MACRO_TYPE_UINT8;
					streamH << "\t" << dataType << ptrType << " fldVarOut_v" << j << " = " << assignmentType << ";" << std::endl;
					break;
					
				default:
					break;
				}
				if(allFs.lstFunctions[i].outputArguments[j].type != MAT_TYPE_MXARRAY)
				{
					streamH << "\t" << MACRO_TYPE_INT32_LE << " dimOutX_v" << j << " = 0;" << std::endl;
					streamH << "\t" << MACRO_TYPE_INT32_LE << " dimOutY_v" << j << " = 0;" << std::endl;
				}
				streamH << "\tif(nlhs > " << j << ")" << std::endl;
				streamH << "\t{" << std::endl;

				if(allFs.lstFunctions[i].outputArguments[j].type == MAT_TYPE_MXARRAY)
				{
					streamH << "\t\t" << "fldVarOut_v" << j << " = &plhs[" << j << "];" << std::endl;
				}
				else
				{
					if(allFs.lstFunctions[i].outputArguments[j].dimX >= 0)
					{
						streamH << "\t\tdimOutX_v" << j << " = " << allFs.lstFunctions[i].outputArguments[j].dimX << ";" << std::endl;
					}
					else
					{
						if(allFs.lstFunctions[i].outputArguments[j].refV2X >= 0)
						{
							streamH << "\t\tdimOutX_v" << j << " = (" << MACRO_TYPE_INT32_LE << ")fldVarIn_v" << allFs.lstFunctions[i].outputArguments[j].refV2X
								<< ";" << std::endl;
						}
						else
						{
							if(allFs.lstFunctions[i].outputArguments[j].refY2X >= 0)
							{
								streamH << "\t\tdimOutX_v" << j << " = dimInY_v" << allFs.lstFunctions[i].outputArguments[j].refY2X
									<< ";" << std::endl;
							}
							else
							{
								if(allFs.lstFunctions[i].outputArguments[j].refX2X >= 0)
								{
									streamH << "\t\tdimOutX_v" << j << " = dimInX_v" << allFs.lstFunctions[i].outputArguments[j].refX2X
										<< ";" << std::endl;
								}
								else
								{
									streamH << "\t\tdimOutX_v" << j << " = dimInX_v" << j << ";" << std::endl;
								}
							}
						}
					}
					if(allFs.lstFunctions[i].outputArguments[j].dimY >= 0)
					{
						streamH << "\t\tdimOutY_v" << j << " = " << allFs.lstFunctions[i].outputArguments[j].dimY << ";" << std::endl;
					}
					else
					{
						if(allFs.lstFunctions[i].outputArguments[j].refV2Y >= 0)
						{
							streamH << "\t\tdimOutY_v" << j << " = (" << MACRO_TYPE_INT32_LE << ")fldVarIn_v"
								<< allFs.lstFunctions[i].outputArguments[j].refV2Y
								<< ";" << std::endl;
						}
						else
						{
							if(allFs.lstFunctions[i].outputArguments[j].refX2Y >= 0)
							{
								streamH << "\t\tdimOutY_v" << j << " = dimInX_v"
									<< allFs.lstFunctions[i].outputArguments[j].refX2Y
									<< ";" << std::endl;
							}
							else
							{
								if(allFs.lstFunctions[i].outputArguments[j].refY2Y >= 0)
								{
									streamH << "\t\tdimOutY_v" << j << " = dimInY_v"
										<< allFs.lstFunctions[i].outputArguments[j].refY2Y
										<< ";" << std::endl;
								}
								else
								{
									streamH << "\t\tdimOutY_v" << j << " = dimInY_v" << j << ";"  << std::endl;
								}
							}
						}
					}
				}
				streamH << "\t}" << std::endl;
			}

			if(needComma)
			{
				switch(allFs.lstFunctions[i].outputArguments[j].type)
				{
				case MAT_TYPE_MXARRAY:
					parametersFcall << ", fldVarOut_v" << j << std::flush;
					parametersTFcall << ", \n\t\t\t" << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/ " << dataType << ptrType << " paramOut" << j << std::flush;
					break;
				case MAT_TYPE_INHERIT:
					switch(allFs.lstFunctions[i].outputArguments[j].dimension)
					{
					case MAT_DIM_2D:
						parametersFcall << ", fldVarOut_v" << j << ", formatIn_v" << allFs.lstFunctions[i].outputArguments[j].refType << ", dimOutY_v" << j << ", dimOutX_v" << j << std::flush;
						parametersTFcall << ", \n\t\t\t" << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/ " << dataType << ptrType << " paramOut" << j << std::flush;
						parametersTFcall << ", jvxDataFormat formatOut" << j << ", " << MACRO_TYPE_INT32_LE << " dimOutY" << j << ", " << MACRO_TYPE_INT32_LE << " dimOutX" << j << std::flush;
						break;
					case MAT_DIM_1D:
						parametersFcall << ", fldVarOut_v" << j << ", formatIn_v" << allFs.lstFunctions[i].outputArguments[j].refType << ", dimOutX_v" << j << std::flush;
						parametersTFcall << ", \n\t\t\t" << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/ "  << dataType << ptrType << " paramOut" << j << std::flush;
						parametersTFcall << ", jvxDataFormat formatOut" << ", " << MACRO_TYPE_INT32_LE << " dimOutX" << j << std::flush; break;
					case MAT_DIM_0D:
						parametersFcall << ", fldVarOut_v" << j << ", formatIn_v" << allFs.lstFunctions[i].outputArguments[j].refType <<std::flush;
						parametersTFcall << ", \n\t\t\t" << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/ "  << dataType << ptrType << " paramOut" << j << std::flush;
						parametersTFcall << ", jvxDataFormat formatOut" << j << std::flush; break;
					}
					break;
				case MAT_TYPE_DATA:
				case MAT_TYPE_SIZE:
				case MAT_TYPE_INT64:
				case MAT_TYPE_INT32:
				case MAT_TYPE_INT16:
				case MAT_TYPE_INT8:
				case MAT_TYPE_UINT64:
				case MAT_TYPE_UINT32:
				case MAT_TYPE_UINT16:
				case MAT_TYPE_UINT8:

					switch(allFs.lstFunctions[i].outputArguments[j].dimension)
					{
					case MAT_DIM_2D:
						parametersFcall << ", fldVarOut_v" << j << ", dimOutY_v" << j << ", dimOutX_v" << j << std::flush;
						parametersTFcall << ", \n\t\t\t" << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/ " << dataType << ptrType << " paramOut" << j << std::flush;
						parametersTFcall << ", " << MACRO_TYPE_INT32_LE << " dimOutY" << j << ", " << MACRO_TYPE_INT32_LE << " dimOutX" << j << std::flush;
						break;
					case MAT_DIM_1D:
						parametersFcall << ", fldVarOut_v" << j << ", dimOutX_v" << j << std::flush;
						parametersTFcall << ", \n\t\t\t" << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/ "  << dataType << ptrType << " paramOut" << j << std::flush;
						parametersTFcall << ", " << MACRO_TYPE_INT32_LE << " dimOutX" << j << std::flush;
						break;
					case MAT_DIM_0D:
						parametersTFcall << ", \n\t\t\t" << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/ "  << dataType << ptrType << "* paramOut" << j << std::flush;
						parametersFcall << ", &fldVarOut_v" << j << std::flush;
						break;
					}
					break;
				case MAT_TYPE_STRING:
					parametersFcall << ", &fldVarOut_v" << j << std::flush;
					parametersTFcall << ", " << dataType << ptrType << "* paramOut" << j << std::flush;
					break;
				default:
					break;
				}
			}
			else
			{
				switch(allFs.lstFunctions[i].outputArguments[j].type)
				{
				case MAT_TYPE_MXARRAY:
					parametersFcall << "fldVarOut_v" << j << std::flush;
					parametersTFcall << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/ " << dataType << ptrType << " paramOut" << j << std::flush;
					break;
				case MAT_TYPE_INHERIT:
					switch(allFs.lstFunctions[i].outputArguments[j].dimension)
					{
					case MAT_DIM_2D:
						parametersFcall << "fldVarOut_v" << j << ", formatIn_v" << allFs.lstFunctions[i].outputArguments[j].refType << ", dimOutY_v" << j << ", dimOutX_v" << j << std::flush;
						parametersTFcall << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/ " << dataType << ptrType << " paramOut" << j << std::flush;
						parametersTFcall << ", jvxDataFormat formatOut" << j << ", " << MACRO_TYPE_INT32_LE << " dimOutY" << j << ", " << MACRO_TYPE_INT32_LE << " dimOutX" << j << std::flush;
						break;
					case MAT_DIM_1D:
						parametersFcall << "fldVarOut_v" << j << ", formatIn_v" << allFs.lstFunctions[i].outputArguments[j].refType << ", dimOutX_v" << j << std::flush;
						parametersTFcall << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/ " << dataType << ptrType << " paramOut" << j << std::flush;
						parametersTFcall << ", jvxDataFormat formatOut" << j <<  ", " << MACRO_TYPE_INT32_LE << " dimOutX" << j << std::flush;
						break;
					case MAT_DIM_0D:
						parametersFcall << "fldVarOut_v" << j << ", formatIn_v" << allFs.lstFunctions[i].outputArguments[j].refType <<std::flush;
						parametersTFcall << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/ " << dataType << ptrType << " paramOut" << j << std::flush;
						parametersTFcall << ", jvxDataFormat formatOut" << j << std::flush;
						break;
					}
					break;
				case MAT_TYPE_DATA:
				case MAT_TYPE_SIZE:
				case MAT_TYPE_INT64:
				case MAT_TYPE_INT32:
				case MAT_TYPE_INT16:
				case MAT_TYPE_INT8:
				case MAT_TYPE_UINT64:
				case MAT_TYPE_UINT32:
				case MAT_TYPE_UINT16:
				case MAT_TYPE_UINT8:
					switch(allFs.lstFunctions[i].outputArguments[j].dimension)
					{
					case MAT_DIM_2D:
						parametersFcall << "fldVarOut_v" << j << ", dimOutY_v" << j << ", dimOutX_v" << j << std::flush;
						parametersTFcall << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/" << dataType << ptrType << " paramOut" << j << std::flush;
						parametersTFcall << ", " << MACRO_TYPE_INT32_LE << " dimOutY" << j << ", " << MACRO_TYPE_INT32_LE << " dimOutX" << j << std::flush;
						break;
					case MAT_DIM_1D:
						parametersFcall << "fldVarOut_v" << j << ", dimOutX_v" << j << std::flush;
						parametersTFcall << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/ " << dataType << ptrType << " paramOut" << j << std::flush;
						parametersTFcall << ", " << MACRO_TYPE_INT32_LE << " dimOutX" << j << std::flush;
						break;
					case MAT_DIM_0D:
						parametersTFcall << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "->*/ " << dataType << ptrType << "* paramOut" << j << std::flush;
						parametersFcall << "&fldVarOut_v" << j << std::flush;
						break;
					}
					break;
				case MAT_TYPE_STRING:
					parametersFcall << "&fldVarOut_v" << j << std::flush;
					parametersTFcall << " /* " << allFs.lstFunctions[i].outputArguments[j].description << "-> */" << dataType << ptrType << "* paramOut" << j << std::flush;
					break;
				default:
					break;
				}
				needComma = true;
			}
		}

		for(unsigned int j = 0;j < allFs.lstFunctions[i].outputArguments.size(); j++)
		{
			streamH << "\n\t//==========================================================" << std::endl;
			streamH << "\t// Allocate memory for output variable #" << j << std::endl;
			streamH << "\t//==========================================================" << std::endl;
			switch(allFs.lstFunctions[i].outputArguments[j].dimension)
			{
			case MAT_DIM_2D:
				switch(allFs.lstFunctions[i].outputArguments[j].type)
				{
				case MAT_TYPE_INHERIT:
					streamH << "\tif((dimOutX_v" << j << " != 0) && (dimOutY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tsize_t szElement = 0;\n" << std::endl;
					streamH << "\t\tswitch(formatIn_v" << allFs.lstFunctions[i].outputArguments[j].refType << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_DATA << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(jvxData);\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_64BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT64_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_32BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT32_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_16BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT16_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_8BIT << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT8 << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tdefault:" << std::endl;
					streamH << "\t\t\tszElement = 0;\n\t\t\tbreak;" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(szElement != 0)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_HANDLE << "*[dimOutY_v" << j << "];" << std::endl;
					streamH << "\t\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t\t{" << std::endl;
					streamH << "\t\t\t\tfldVarOut_v" << j << "[k] = (" << MACRO_TYPE_HANDLE << "*)new char[szElement*dimOutX_v" << j << "];" << std::endl;
					streamH << "\t\t\t}" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_DATA:
					streamH << "\tif((dimOutX_v" << j << " != 0) && (dimOutY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_DATA << "*[dimOutY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarOut_v" << j << "[k] = new " << MACRO_TYPE_DATA << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_SIZE:
					streamH << "\tif((dimOutX_v" << j << " != 0) && (dimOutY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_SIZE << "*[dimOutY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarOut_v" << j << "[k] = new " << MACRO_TYPE_SIZE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT64:
					streamH << "\tif((dimOutX_v" << j << " != 0) && (dimOutY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_INT64_LE << "*[dimOutY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarOut_v" << j << "[k] = new " << MACRO_TYPE_INT64_LE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT32:
					streamH << "\tif((dimOutX_v" << j << " != 0) && (dimOutY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_INT32_LE << "*[dimOutY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarOut_v" << j << "[k] = new " << MACRO_TYPE_INT32_LE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT16:
					streamH << "\tif((dimOutX_v" << j << " != 0) && (dimOutY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_INT16_LE << "*[dimOutY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarOut_v" << j << "[k] = new " << MACRO_TYPE_INT16_LE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT8:
					streamH << "\tif((dimOutX_v" << j << " != 0) && (dimOutY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_INT8 << "*[dimOutY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarOut_v" << j << "[k] = new " << MACRO_TYPE_INT8 << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					
				case MAT_TYPE_UINT64:
					streamH << "\tif((dimOutX_v" << j << " != 0) && (dimOutY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_INT64_LE << "*[dimOutY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarOut_v" << j << "[k] = new " << MACRO_TYPE_INT64_LE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT32:
					streamH << "\tif((dimOutX_v" << j << " != 0) && (dimOutY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_INT32_LE << "*[dimOutY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarOut_v" << j << "[k] = new " << MACRO_TYPE_INT32_LE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT16:
					streamH << "\tif((dimOutX_v" << j << " != 0) && (dimOutY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_INT16_LE << "*[dimOutY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarOut_v" << j << "[k] = new " << MACRO_TYPE_INT16_LE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT8:
					streamH << "\tif((dimOutX_v" << j << " != 0) && (dimOutY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_INT8 << "*[dimOutY_v" << j << "];" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t fldVarOut_v" << j << "[k] = new " << MACRO_TYPE_INT8 << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					
					break;
				default:
					break;
				}
				break;
			case MAT_DIM_1D:
				switch(allFs.lstFunctions[i].outputArguments[j].type)
				{
				case MAT_TYPE_INHERIT:
					streamH << "\tif((dimOutX_v" << j << " != 0) && (dimOutY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tsize_t szElement = 0;\n" << std::endl;
					streamH << "\t\tswitch(formatIn_v" << allFs.lstFunctions[i].outputArguments[j].refType << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_DATA << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(jvxData);\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_64BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT64_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_32BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT32_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_16BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT16_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_8BIT << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT8 << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tdefault:" << std::endl;
					streamH << "\t\t\tszElement = 0;\n\t\t\tbreak;" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(szElement != 0)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tfldVarOut_v" << j << " = (void*)new char[szElement*dimOutX_v" << j << "];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_DATA:
					streamH << "\tif(dimOutX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_DATA << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_SIZE:
					streamH << "\tif(dimOutX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_SIZE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t}" << std::endl;
					break;

				case MAT_TYPE_INT64:
					streamH << "\tif(dimOutX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_INT64_LE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT32:
					streamH << "\tif(dimOutX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_INT32_LE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT16:
					streamH << "\tif(dimOutX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_INT16_LE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT8:
					streamH << "\tif(dimOutX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_INT8 << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t}" << std::endl;
					break;
					
				case MAT_TYPE_UINT64:
					streamH << "\tif(dimOutX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_UINT64_LE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT32:
					streamH << "\tif(dimOutX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_UINT32_LE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT16:
					streamH << "\tif(dimOutX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_UINT16_LE << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT8:
					streamH << "\tif(dimOutX_v" << j << " != 0)" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfldVarOut_v" << j << " = new " << MACRO_TYPE_UINT8 << "[dimOutX_v" << j << "];" << std::endl;
					streamH << "\t}" << std::endl;
					break;
					
				default:
					break;
				}
				break;
			case MAT_DIM_0D:
				switch(allFs.lstFunctions[i].outputArguments[j].type)
				{
				case MAT_TYPE_INHERIT:
					streamH << "\tif((dimOutX_v" << j << " != 0) && (dimOutY_v" << j << " != 0))" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tsize_t szElement = 0;\n" << std::endl;
					streamH << "\t\tswitch(formatIn_v" << allFs.lstFunctions[i].outputArguments[j].refType << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_DATA << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(jvxData);\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_64BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT64_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_32BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT32_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_16BIT_LE << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT16_LE << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tcase " << MACRO_DATATYPE_8BIT << ":" << std::endl;
					streamH << "\t\t\tszElement = sizeof(" << MACRO_TYPE_INT8 << ");\n\t\t\tbreak;" << std::endl;
					streamH << "\t\tdefault:" << std::endl;
					streamH << "\t\t\tszElement = 0;\n\t\t\tbreak;" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tif(szElement != 0)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tfldVarIn_v" << j << " = (void*)new char[szElement];" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_DATA:
					streamH << "\tfldVarOut_v" << j << " = 0.0;" << std::endl;
					break;
				case MAT_TYPE_SIZE:
					streamH << "\tfldVarOut_v" << j << " = 0;" << std::endl;
					break;
					
				case MAT_TYPE_INT64:
					streamH << "\tfldVarOut_v" << j << " = 0;" << std::endl;
					break;
				case MAT_TYPE_INT32:
					streamH << "\tfldVarOut_v" << j << " = 0;" << std::endl;
					break;
				case MAT_TYPE_INT16:
					streamH << "\tfldVarOut_v" << j << " = 0;" << std::endl;
					break;
				case MAT_TYPE_INT8:
					streamH << "\tfldVarOut_v" << j << " = 0;" << std::endl;
					break;
					
				case MAT_TYPE_UINT64:
					streamH << "\tfldVarOut_v" << j << " = 0;" << std::endl;
					break;
				case MAT_TYPE_UINT32:
					streamH << "\tfldVarOut_v" << j << " = 0;" << std::endl;
					break;
				case MAT_TYPE_UINT16:
					streamH << "\tfldVarOut_v" << j << " = 0;" << std::endl;
					break;
				case MAT_TYPE_UINT8:
					streamH << "\tfldVarOut_v" << j << " = 0;" << std::endl;
					break;
				default:
					break;

				}
				break;
			default:
				break;

			}
		}

		if(allFs.lstFunctions[i].generateBackwardLink)
		{
			if(needComma)
			{
				parametersFcall << ", " << THE_EXTERNAL_CALL_HANDLER << "" << std::flush;
				parametersTFcall << ", " << EXTERNAL_CALL_HANDLE_TYPE << "* " << THE_EXTERNAL_CALL_HANDLER << "" << std::flush;
			}
			else
			{
				parametersFcall << "" << THE_EXTERNAL_CALL_HANDLER << "" << std::flush;
				parametersTFcall << "" << EXTERNAL_CALL_HANDLE_TYPE << "* " << THE_EXTERNAL_CALL_HANDLER << "" << std::flush;
			}
		}

		streamH << "\t res = hObject->" << allFs.lstFunctions[i].nameFunctionCpp << "(" << parametersFcall.str() << ");" << std::endl;
		streamH << "\tif(" << MACRO_CALL_FUNCTION_CHECK_FALSE << ")" << std::endl;
		streamH << "\t{" << std::endl;
		streamH << "\t\t" << MACRO_DEFINE_ERROR << ";\n\t\thObject->extcall_lasterror(&ptrErr);" << std::endl;
		streamH << "\t\tstd::string errMsg = ptrErr.errorDescription.std_str();" << std::endl;
		streamH << "\t\tif(errMsg.empty())" << std::endl;
		streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(((std::string)\"" << "(" << allFs.friendlyNameReferenceClass << "::"
			<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Call of member function " << allFs.lstFunctions[i].nameFunctionCpp << 
			" failed, error code: \" + jvxErrorType_txt(res) + \"\\n\").c_str());" << std::endl;
		streamH << "\t\telse" << std::endl;
		streamH << "\t\t\t" << THE_EXTERNAL_CALL_HANDLER << "->postMessageExternal(((std::string)\"" << "(" << allFs.friendlyNameReferenceClass << "::"
			<< allFs.lstFunctions[i].nameFunctionCpp << ")" << " Call of member function " << allFs.lstFunctions[i].nameFunctionCpp << 
			" failed, error code: \" + jvxErrorType_txt(res) +\", (error reason: \" + errMsg + \")\\n\").c_str());" << std::endl;
		streamH << "\t}" << std::endl;

		streamHP << std::endl << "\t// Generate prototype function for function >" <<  allFs.lstFunctions[i].nameFunctionCpp << "<" <<  std::endl;
		streamHP << "\t" << MACRO_TYPE_RETURN_SUCCESS << " " << allFs.lstFunctions[i].nameFunctionCpp << "(" << parametersTFcall.str() << ");" << std::endl;
		for(unsigned int j = 0;j < allFs.lstFunctions[i].inputArguments.size(); j++)
		{
			streamH << "\n\t//==========================================================" << std::endl;
			streamH << "\t// Deallocate memory for input variable #" << j << std::endl;
			streamH << "\t//==========================================================" << std::endl;
			switch(allFs.lstFunctions[i].inputArguments[j].type)
			{
			case MAT_TYPE_INHERIT:
				switch(allFs.lstFunctions[i].inputArguments[j].dimension)
				{
				case MAT_DIM_2D:
					streamH << "\tif(fldVarIn_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimInY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tif(fldVarIn_v" << j << "[k])" << std::endl;
					streamH << "\t\t\t\tdelete[]((char*)fldVarIn_v" << j << "[k]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[](fldVarIn_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_DIM_1D:
				case MAT_DIM_0D:
					streamH << "\tif(fldVarIn_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarIn_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				default:
					break;

				}
				break;
			case MAT_TYPE_DATA:
			case MAT_TYPE_SIZE:
			case MAT_TYPE_INT64:
			case MAT_TYPE_INT32:
			case MAT_TYPE_INT16:
			case MAT_TYPE_INT8:
			case MAT_TYPE_UINT64:
			case MAT_TYPE_UINT32:
			case MAT_TYPE_UINT16:
			case MAT_TYPE_UINT8:
				switch(allFs.lstFunctions[i].inputArguments[j].dimension)
				{
				case MAT_DIM_2D:
					streamH << "\tif(fldVarIn_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimInY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tif(fldVarIn_v" << j << "[k])" << std::endl;
					streamH << "\t\t\t\tdelete[]((char*)fldVarIn_v" << j << "[k]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[](fldVarIn_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_DIM_1D:
					streamH << "\tif(fldVarIn_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarIn_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_DIM_0D:
					break;
				default:
					break;
				}
				break;
			default:
				break;

			}
		}

		for(unsigned int j = 0;j < allFs.lstFunctions[i].outputArguments.size(); j++)
		{
			streamH << "\n\t//==========================================================" << std::endl;
			streamH << "\t// Deallocate memory for output variable #" << j << std::endl;
			streamH << "\t//==========================================================" << std::endl;
			switch(allFs.lstFunctions[i].outputArguments[j].dimension)
			{
			case MAT_DIM_2D:
				switch(allFs.lstFunctions[i].outputArguments[j].type)
				{
				case MAT_TYPE_INHERIT:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void**)fldVarOut_v" << j << ", dimOutY_v" << j << ", dimOutX_v" << j
						<< ", formatIn_v" << allFs.lstFunctions[i].outputArguments[j].refType << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tif(fldVarOut_v" << j << "[k])" << std::endl;
					streamH << "\t\t\t\tdelete[]((char*)fldVarOut_v" << j << "[k]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[](fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_DATA:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void**)fldVarOut_v" << j << ", dimOutY_v" << j << ", dimOutX_v" << j
						<< ", " << MACRO_DATATYPE_DATA << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tif(fldVarOut_v" << j << "[k])" << std::endl;
					streamH << "\t\t\t\tdelete[]((char*)fldVarOut_v" << j << "[k]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[](fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;

					break;
				case MAT_TYPE_SIZE:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void**)fldVarOut_v" << j << ", dimOutY_v" << j << ", dimOutX_v" << j
						<< ", " << MACRO_DATATYPE_SIZE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tif(fldVarOut_v" << j << "[k])" << std::endl;
					streamH << "\t\t\t\tdelete[]((char*)fldVarOut_v" << j << "[k]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[](fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;

					break;
				case MAT_TYPE_INT64:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void**)fldVarOut_v" << j << ", dimOutY_v" << j <<", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_64BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tif(fldVarOut_v" << j << "[k])" << std::endl;
					streamH << "\t\t\t\tdelete[]((char*)fldVarOut_v" << j << "[k]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[](fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT32:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void**)fldVarOut_v" << j << ", dimOutY_v" << j <<", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_32BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tif(fldVarOut_v" << j << "[k])" << std::endl;
					streamH << "\t\t\t\tdelete[]((char*)fldVarOut_v" << j << "[k]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[](fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT16:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void**)fldVarOut_v" << j << ", dimOutY_v" << j << ", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_16BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tif(fldVarOut_v" << j << "[k])" << std::endl;
					streamH << "\t\t\t\tdelete[]((char*)fldVarOut_v" << j << "[k]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[](fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT8:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void**)fldVarOut_v" << j << ", dimOutY_v" << j << ", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_8BIT << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tif(fldVarOut_v" << j << "[k])" << std::endl;
					streamH << "\t\t\t\tdelete[]((char*)fldVarOut_v" << j << "[k]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[](fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
					
				case MAT_TYPE_UINT64:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void**)fldVarOut_v" << j << ", dimOutY_v" << j <<", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_U64BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tif(fldVarOut_v" << j << "[k])" << std::endl;
					streamH << "\t\t\t\tdelete[]((char*)fldVarOut_v" << j << "[k]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[](fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT32:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void**)fldVarOut_v" << j << ", dimOutY_v" << j <<", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_U32BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tif(fldVarOut_v" << j << "[k])" << std::endl;
					streamH << "\t\t\t\tdelete[]((char*)fldVarOut_v" << j << "[k]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[](fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT16:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void**)fldVarOut_v" << j << ", dimOutY_v" << j << ", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_U16BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tif(fldVarOut_v" << j << "[k])" << std::endl;
					streamH << "\t\t\t\tdelete[]((char*)fldVarOut_v" << j << "[k]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[](fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT8:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void**)fldVarOut_v" << j << ", dimOutY_v" << j << ", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_U8BIT << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tfor(int k = 0; k < dimOutY_v" << j << "; k++)" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tif(fldVarOut_v" << j << "[k])" << std::endl;
					streamH << "\t\t\t\tdelete[]((char*)fldVarOut_v" << j << "[k]);" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[](fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
					
				case MAT_TYPE_STRING:
					streamH << "\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tstd::string tmp;" << std::endl;
					streamH << "\t\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\ttmp = fldVarOut_v" << j << "->bString;" << std::endl;
					streamH << "\t\t\tif(hObject) hObject->extcall_deallocate(fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), tmp.c_str());" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				default:
					break;

				}
				break;
			case MAT_DIM_1D:
				switch(allFs.lstFunctions[i].outputArguments[j].type)
				{
				case MAT_TYPE_INHERIT:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)fldVarOut_v" << j << ", dimOutX_v" << j
						<< ", formatIn_v" << allFs.lstFunctions[i].outputArguments[j].refType << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_DATA:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)fldVarOut_v" << j << ", dimOutX_v" << j
						<< ", " << MACRO_DATATYPE_DATA << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;

					break;
				case MAT_TYPE_SIZE:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)fldVarOut_v" << j << ", dimOutX_v" << j
						<< ", " << MACRO_DATATYPE_SIZE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;

					break;
				case MAT_TYPE_INT64:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)fldVarOut_v" << j << ", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_64BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT32:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)fldVarOut_v" << j << ", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_32BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT16:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)fldVarOut_v" << j << ", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_16BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT8:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)fldVarOut_v" << j << ", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_8BIT << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
					
				case MAT_TYPE_UINT64:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)fldVarOut_v" << j << ", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_U64BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT32:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)fldVarOut_v" << j << ", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_U32BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT16:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)fldVarOut_v" << j << ", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_U16BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT8:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)fldVarOut_v" << j << ", dimOutX_v" << j
						<<  ", " << MACRO_DATATYPE_U8BIT << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
					
				case MAT_TYPE_STRING:
					streamH << "\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tstd::string tmp;" << std::endl;
					streamH << "\t\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\ttmp = fldVarOut_v" << j << "->bString;" << std::endl;
					streamH << "\t\t\tif(hObject) hObject->extcall_deallocate(fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), tmp.c_str());" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				default:
					break;

				}
				break;
			case MAT_DIM_0D:
				switch(allFs.lstFunctions[i].outputArguments[j].type)
				{
				case MAT_TYPE_INHERIT:
					streamH << "\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)fldVarOut_v" << j << ", dimOutX_v" << j
						<< ", formatIn_v" << allFs.lstFunctions[i].outputArguments[j].refType << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t\tdelete[]((char*)fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_DATA:
					streamH << "\tif(nlhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*) &fldVarOut_v" << j << ", 1"
						<< ", " << MACRO_DATATYPE_DATA << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_SIZE:
					streamH << "\tif(nlhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*) &fldVarOut_v" << j << ", 1"
						<< ", " << MACRO_DATATYPE_SIZE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;

				case MAT_TYPE_INT64:
					streamH << "\tif(nlhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)&fldVarOut_v" << j << ", 1"
						<<  ", " << MACRO_DATATYPE_64BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT32:
					streamH << "\tif(nlhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)&fldVarOut_v" << j << ", 1"
						<<  ", " << MACRO_DATATYPE_32BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT16:
					streamH << "\tif(nlhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)&fldVarOut_v" << j << ", 1"
						<<  ", " << MACRO_DATATYPE_16BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_INT8:
					streamH << "\tif(nlhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)&fldVarOut_v" << j << ", 1"
						<<  ", " << MACRO_DATATYPE_8BIT << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
					
				case MAT_TYPE_UINT64:
					streamH << "\tif(nlhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)&fldVarOut_v" << j << ", 1"
						<<  ", " << MACRO_DATATYPE_U64BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT32:
					streamH << "\tif(nlhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)&fldVarOut_v" << j << ", 1"
						<<  ", " << MACRO_DATATYPE_U32BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT16:
					streamH << "\tif(nlhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)&fldVarOut_v" << j << ", 1"
						<<  ", " << MACRO_DATATYPE_U16BIT_LE << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
				case MAT_TYPE_UINT8:
					streamH << "\tif(nlhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), (const void*)&fldVarOut_v" << j << ", 1"
						<<  ", " << MACRO_DATATYPE_U8BIT << ");" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;
					break;
					
				case MAT_TYPE_STRING:
					streamH << "\tif(nlhs > " << j << ")" << std::endl;
					streamH << "\t{" << std::endl;
					streamH << "\t\tif(" << THE_EXTERNAL_CALL_HANDLER << ")" << std::endl;
					streamH << "\t\t{" << std::endl;
					streamH << "\t\t\tstd::string tmp;" << std::endl;
					streamH << "\t\t\tif(fldVarOut_v" << j << ")" << std::endl;
					streamH << "\t\t\t{" << std::endl;
					streamH << "\t\t\t\ttmp = fldVarOut_v" << j << "->bString;" << std::endl;
					streamH << "\t\t\t\tif(hObject) hObject->extcall_deallocate(fldVarOut_v" << j << ");" << std::endl;
					streamH << "\t\t\t}" << std::endl;
					streamH << "\t\t\t " << THE_EXTERNAL_CALL_HANDLER << "->convertCToExternal(&(plhs[" << j << "]), tmp.c_str());" << std::endl;
					streamH << "\t\t}" << std::endl;
					streamH << "\t}" << std::endl;

					break;
				default:
					break;

				}
				break;
			default:
				break;

			}
		}

		streamH << "\tif(res == JVX_NO_ERROR)" << std::endl;
		streamH << "\t{" << std::endl;
		streamH << "\t\tres = " << THE_EXTERNAL_CALL_HANDLER << "->fill_empty(&plhs[" << allFs.lstFunctions[i].outputArguments.size() << "], nlhs, " << allFs.lstFunctions[i].outputArguments.size() << ");" << std::endl;
		streamH << "\t}" << std::endl;
		streamH << "\t return(res);" << std::endl;
		streamH << "}" << std::endl;

		streamInit << "\t\t{" << std::endl;
		if(allFs.lstFunctions[i].inputArguments.size() > 0)
		{
			streamInit << "\t\t\tconst char* regFuncInParams[" << allFs.lstFunctions[i].inputArguments.size() << "] = " << std::flush;
			streamInit << "{" << std::flush;
			for(int j = 0; j < (int)allFs.lstFunctions[i].inputArguments.size(); j++)
			{
				std::string tp = "unknown";
				std::string dd = ":unknown";

				switch(allFs.lstFunctions[i].inputArguments[j].type)
				{
				case MAT_TYPE_DATA:
					tp  = JVX_DATA_DESCRIPTOR;
					break;
				case MAT_TYPE_SIZE:
					tp  = "jvxSize";
					break;
					
				case MAT_TYPE_INT64:
					tp  = "jvxInt64";
					break;
				case MAT_TYPE_INT32:
					tp  = "jvxInt32";
					break;
				case MAT_TYPE_INT16:
					tp  = "jvxInt16";
					break;
				case MAT_TYPE_INT8:
					tp  = "jvxInt8";
					break;
					
				case MAT_TYPE_UINT64:
					tp  = "jvxUInt64";
					break;
				case MAT_TYPE_UINT32:
					tp  = "jvxUInt32";
					break;
				case MAT_TYPE_UINT16:
					tp  = "jvxUInt16";
					break;
				case MAT_TYPE_UINT8:
					tp  = "jvxUInt8";
					break;

				case MAT_TYPE_STRING:
					tp  = "string";
					break;
				case MAT_TYPE_INHERIT:
					tp  = "**";
					break;
				case MAT_TYPE_MXARRAY:
					tp  = "mx";
					break;
				case MAT_TYPE_NONE:
					tp  = "none";
					break;
				default:
					break;

				}
				std::string yt = "M";
				std::string xt = "N";
				switch(allFs.lstFunctions[i].inputArguments[j].dimension)
				{
				case MAT_DIM_2D:
					if(allFs.lstFunctions[i].inputArguments[j].dimY >= 0)
					{
						yt = jvx_int2String(allFs.lstFunctions[i].inputArguments[j].dimY);
					}
					if(allFs.lstFunctions[i].inputArguments[j].dimX >= 0)
					{
						xt = jvx_int2String(allFs.lstFunctions[i].inputArguments[j].dimX);
					}
					dd = ":" + yt + "x" + xt;
					break;
				case MAT_DIM_1D:
					if(allFs.lstFunctions[i].inputArguments[j].dimX >= 0)
					{
						xt = jvx_int2String(allFs.lstFunctions[i].inputArguments[j].dimX);
					}
					dd = ":1x" + xt;
					break;
				case MAT_DIM_0D:
					dd  = "";
					break;
				default:
					break;

				}
				if(j != 0)
					streamInit << ", " << std::flush;
				streamInit << "\"" << allFs.lstFunctions[i].inputArguments[j].description << "(" << tp << dd << ")" << "\"" << std::flush;
			}
			streamInit << "};" << std::endl;
		}
		else
		{
			streamInit << "\t\t\tconst char** regFuncInParams = NULL;" << std::endl;
		}
		if(allFs.lstFunctions[i].outputArguments.size() > 0)
		{
			streamInit << "\t\t\tconst char* regFuncOutParams[" <<
				allFs.lstFunctions[i].outputArguments.size() << "] = " << std::flush;
			streamInit << "{" << std::flush;
			for(int j = 0; j < (int)allFs.lstFunctions[i].outputArguments.size(); j++)
			{
				std::string tp = "unknown";
				std::string dd = ":unknown";

				switch(allFs.lstFunctions[i].outputArguments[j].type)
				{
				case MAT_TYPE_DATA:
					tp  = JVX_DATA_DESCRIPTOR;
					break;
				case MAT_TYPE_SIZE:
					tp  = "jvxSize";
					break;
					
				case MAT_TYPE_INT64:
					tp  = "jvxInt64";
					break;
				case MAT_TYPE_INT32:
					tp  = "jvxInt32";
					break;
				case MAT_TYPE_INT16:
					tp  = "jvxInt16";
					break;
				case MAT_TYPE_INT8:
					tp  = "jvxInt8";
					break;

				case MAT_TYPE_UINT64:
					tp  = "jvxUInt64";
					break;
				case MAT_TYPE_UINT32:
					tp  = "jvxUInt32";
					break;
				case MAT_TYPE_UINT16:
					tp  = "jvxUInt16";
					break;
				case MAT_TYPE_UINT8:
					tp  = "jvxUInt8";
					break;

				case MAT_TYPE_STRING:
					tp  = "string";
					break;
				case MAT_TYPE_INHERIT:
					tp  = "**";
					break;
				case MAT_TYPE_MXARRAY:
					tp  = "mx";
					break;
				case MAT_TYPE_NONE:
					tp  = "none";
					break;
				default:
					break;

				}
				std::string yt = "M";
				std::string xt = "N";
				switch(allFs.lstFunctions[i].outputArguments[j].dimension)
				{
				case MAT_DIM_2D:
					if(allFs.lstFunctions[i].outputArguments[j].dimY >= 0)
					{
						yt = jvx_int2String(allFs.lstFunctions[i].outputArguments[j].dimY);
					}
					if(allFs.lstFunctions[i].outputArguments[j].dimX >= 0)
					{
						xt = jvx_int2String(allFs.lstFunctions[i].outputArguments[j].dimX);
					}
					dd = ":" + yt + "x" + xt;
					break;
				case MAT_DIM_1D:
					if(allFs.lstFunctions[i].outputArguments[j].dimX >= 0)
					{
						xt = jvx_int2String(allFs.lstFunctions[i].outputArguments[j].dimX);
					}
					dd = ":1x" + xt;
					break;
				case MAT_DIM_0D:
					dd  = "";
					break;
				default:
					break;

				}
				if(j != 0)
					streamInit << ", " << std::flush;
				streamInit << "\"" << allFs.lstFunctions[i].outputArguments[j].description << "(" << tp << dd << ")" << "\""
					<< std::flush;
			}
			streamInit << "};" << std::endl;
		}
		else
		{
			streamInit << "\t\t\tconst char** regFuncOutParams = NULL;" << std::endl;
		}

		streamInit << "\t\t\tres = " << THE_EXTERNAL_CALL_HANDLER << "->registerFunction( _theExtCallObjectName.c_str(), \"" << allFs.lstFunctions[i].nameFunctionExpose << "\", "
			<< allFs.lstFunctions[i].nameFunctionC << ", \"" << allFs.lstFunctions[i].descriptionFunctionExpose << "\", fObject, regFuncInParams, "
			<< allFs.lstFunctions[i].inputArguments.size() << ", regFuncOutParams, " << allFs.lstFunctions[i].outputArguments.size() << ");" << std::endl;
		streamInit << "\t\t\tif(res != JVX_NO_ERROR) return(res);" << std::endl;
		streamInit << "\t\t}" << std::endl;

		streamTerm << "\t\tres = " << THE_EXTERNAL_CALL_HANDLER << "->unregisterFunction( " <<
			allFs.lstFunctions[i].nameFunctionC << ");" << std::endl;
		streamTerm << "\t\tif(res != JVX_NO_ERROR) return(res);" << std::endl;

	}

	streamInit << "\t}" << std::endl;
	streamInit << "\treturn(res);" << std::endl;
	streamInit << "}" << std::endl;
	streamInit << "//==========================================" << std::endl;

	streamTerm << "\t\t " << THE_EXTERNAL_CALL_HANDLER << " = NULL;" << std::endl;
	streamTerm << "\t }" << std::endl;
	streamTerm << "\treturn(res);" << std::endl;
	streamTerm << "}" << std::endl;
	streamTerm << "//==========================================" << std::endl;

	streamH << streamInit.str() << std::endl;
	streamH << streamTerm.str() << std::endl;

	streamH << "#endif" << std::endl;
	streamHP << "#endif" << std::endl;

	// File stream for h file
	std::ofstream osOutFileH;
	osOutFileH.open(outFilenameH.c_str(), std::ios_base::out);
	if(!osOutFileH.is_open())
	{
		std::cout << "Unable to write to file " << outFilenameH << std::endl;
	}
	//	std::cout << (std::string)streamCpp.str() << std::endl;
	//	std::cout << streamH.str() << std::endl;
	osOutFileH << (std::string)streamH.str() << std::endl;
	//std::cout << streamH.str() << std::endl;

	std::ofstream osOutFileHP;
	osOutFileHP.open(outFilenameHP.c_str(), std::ios_base::out);
	if(!osOutFileHP.is_open())
	{
		std::cout << "Unable to write to file " << outFilenameHP << std::endl;
	}
	//	std::cout << (std::string)streamCpp.str() << std::endl;
	//	std::cout << streamH.str() << std::endl;
	osOutFileHP << (std::string)streamHP.str() << std::endl;
	//std::cout << streamH.str() << std::endl;
}